init_.py
from flask import Flask
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from flask_migrate import Migrate 
from app.config import Config 
from app.models import db


app = Flask(__name__)
CORS(app)
app.config.from_object(Config)

db.init_app(app)
jwt = JWTManager(app)
migrate = Migrate(app, db) 


 
from app.auth import auth_bp  
from app.product import product_bp
 
from app.admin import admin_bp
from app.cart import cart_bp

app.register_blueprint(auth_bp, url_prefix='/auth')
app.register_blueprint(product_bp)
app.register_blueprint(admin_bp, url_prefix='/admin')
app.register_blueprint(cart_bp)


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)







-----------------------------------------------------------------------------------------------------------------------
admin.py

from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from app.models import db, User,Product,Order
from app import app  





# User Management:

admin_bp = Blueprint('admin', __name__)

def is_admin(user_id):
    user = User.query.get(user_id)
    return user and user.role == "admin"

# (register admin) is in auth.py


# Get all users
@admin_bp.route('/users', methods=['GET'])
@jwt_required()
def get_all_users():
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    users = User.query.all()
    user_list = []
    for user in users:
        user_data = {
            "id": user.id,
            "name": user.name,
            "email": user.email,
            "role": user.role,
        }
        user_list.append(user_data)
    return jsonify({"users": user_list}), 200
# http://127.0.0.1:5000/admin/users



# display user details
@admin_bp.route('/users/<int:user_id>', methods=['GET'])
@jwt_required()
def user_details(user_id):
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    user_data = {
        "id": user.id,
        "name": user.name,
        "email": user.email,
        "role": user.role,
    }
    return jsonify({"user": user_data}), 200
# http://127.0.0.1:5000/admin/users/5


# update user role
@admin_bp.route('/users/<int:user_id>/promote', methods=['PUT'])
@jwt_required()
def promote_user(user_id):
    current_user_id = get_jwt_identity()

    # Ensure only an admin can promote another user
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    # Promote the user to admin
    user.role = "admin"

    db.session.commit()
    return jsonify({"message": f"User {user_id} has been promoted to admin."}), 200
# http://127.0.0.1:5000/admin/users/8/promote



# delete a user
@admin_bp.route('/users/<int:user_id>', methods=['DELETE'])
@jwt_required()
def delete_user(user_id):
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    db.session.delete(user)
    db.session.commit()
    return jsonify({"message": "User deleted successfully"}), 200
# http://127.0.0.1:5000/admin/users/8

  
# Product Management:



# Add Products
def add_product():
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    data = request.get_json() or {}
    name = data.get('name', "").strip()
    description = data.get('description', "").strip()
    price = data.get('price')
    stock = data.get('stock', 0)
    category = data.get('category', "").strip()
    image_url = data.get('image_url', "").strip()

    # Basic validation: required fields
    if not name or price is None or not category:
        return jsonify({"error": "Missing required product details"}), 400

    new_product = Product(
        name=name,
        description=description,
        price=price,
        stock=stock,
        category=category,
        image_url=image_url
    )
    db.session.add(new_product)
    db.session.commit()

    return jsonify({"message": "Product added successfully", "product_id": new_product.id}), 201





# List Products

@admin_bp.route('/products', methods=['GET'])
@jwt_required()
def list_products():
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    products = Product.query.all()
    product_list = []
    for product in products:
        product_list.append({
            "id": product.id,
            "name": product.name,
            "description": product.description,
            "price": product.price,
            "stock": product.stock,
            "category": product.category,
            "image_url": product.image_url
        })
    return jsonify({"products": product_list}), 200
# http://127.0.0.1:5000/admin/products


# Get product details
@admin_bp.route('/products/<int:product_id>', methods=['GET'])
@jwt_required()
def product_details(product_id):
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    product = Product.query.get(product_id)
    if not product:
        return jsonify({"error": "Product not found"}), 404

    product_data = {
        "id": product.id,
        "name": product.name,
        "description": product.description,
        "price": product.price,
        "stock": product.stock,
        "category": product.category,
        "image_url": product.image_url
    }
    return jsonify({"product": product_data}), 200
# http://127.0.0.1:5000/admin/products/3

# Update Product details

@admin_bp.route('/products/<int:product_id>', methods=['PUT'])
@jwt_required()
def update_product(product_id):
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    product = Product.query.get(product_id)
    if not product:
        return jsonify({"error": "Product not found"}), 404

    data = request.get_json() or {}
    # Update fields if present in the request
    if 'name' in data:
        product.name = data.get('name').strip()
    if 'description' in data:
        product.description = data.get('description').strip()
    if 'price' in data:
        product.price = data.get('price')
    if 'stock' in data:
        product.stock = data.get('stock')
    if 'category' in data:
        product.category = data.get('category').strip()
    if 'image_url' in data:
        product.image_url = data.get('image_url').strip()

    db.session.commit()
    return jsonify({"message": "Product updated successfully"}), 200


# Delete Product

@admin_bp.route('/products/<int:product_id>', methods=['DELETE'])
@jwt_required()
def delete_product(product_id):
    current_user_id = get_jwt_identity()
    if not is_admin(current_user_id):
        return jsonify({"error": "Unauthorized"}), 403

    product = Product.query.get(product_id)
    if not product:
        return jsonify({"error": "Product not found"}), 404

    db.session.delete(product)
    db.session.commit()
    return jsonify({"message": "Product deleted successfully"}), 200

----------------------------------------------------------------------------------------------------------------------------------------------------


auth.py


from app import app
from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity,create_refresh_token
from datetime import timedelta
from app.models import db, User
import jwt
# from config import Config


auth_bp = Blueprint('auth', __name__)

#register
@auth_bp.route('/register', methods=['POST'])
def register():
    data = request.get_json() or {}

    name = data.get('name', "").strip()
    email = data.get('email', "").strip().lower()
    phone = data.get('phone', "").strip()
    password = data.get('password', "").strip()
    role = data.get("role", "user")

    if not name or not email or not password or not phone:
        return jsonify({"error": "All fields are required"}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({"error": "Email already registered"}), 409
    if User.query.filter_by(phone=phone).first():
        return jsonify({"error": "Phone number already exists"}), 400

    hashed_password = generate_password_hash(password)
    new_user = User(name=name, email=email, phone=phone, password=hashed_password, role=role)
    
    db.session.add(new_user)
    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        print("Error committing to the database:", e)
        return jsonify({"error": "Database error"}), 500

    return jsonify({"message": "User registered successfully"}), 201

# if we want to implement flsk for specific routes

# from flask import Flask, request, jsonify
# from flask_cors import cross_origin

# app = Flask(__name__)

# @app.route('/auth/register', methods=['POST'])
# @cross_origin(origin='http://localhost:5173')  # Allow requests from React frontend
# def register():
#     data = request.json
#     return jsonify({"message": "User registered successfully"}), 200




# Register admin

@auth_bp.route('/register-admin', methods=['POST'])
def register_admin():
    data = request.get_json() or {}

    name = data.get('name', "").strip()
    email = data.get('email', "").strip().lower()
    phone = data.get('phone', "").strip()
    password = data.get('password', "").strip()

    if not name or not email or not password or not phone:
        return jsonify({"error": "All fields are required"}), 400

    if User.query.filter_by(email=email).first():
        return jsonify({"error": "Email already registered"}), 409
    if User.query.filter_by(phone=phone).first():
        return jsonify({"error": "Phone number already exists"}), 400

    hashed_password = generate_password_hash(password)
    new_admin = User(name=name, email=email, phone=phone, password=hashed_password, role="admin")

    db.session.add(new_admin)
    try:
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        print("Error committing to the database:", e)
        return jsonify({"error": "Database error"}), 500

    return jsonify({"message": "Admin registered successfully"}), 201


#generated token
def generate_token(user):
    payload = {
        "id": user.id,
        "email": user.email,
        "role": user.role,  
        # "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)
    }
    secret_key = app.config.get("SECRET_KEY", "your_default_secret")
    return jwt.encode(payload, secret_key, algorithm="HS256")



#Login
@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.get_json() or {}

    email = data.get('email', "").strip().lower()
    password = data.get('password', "").strip()

    user = User.query.filter_by(email=email).first()

    if not user or not check_password_hash(user.password, password):
        return jsonify({"error": "Invalid credentials"}), 401

    access_token = create_access_token(identity=str(user.id), expires_delta=timedelta(days=1))
    refresh_token = create_refresh_token(identity=str(user.id))

    return jsonify({
        "message": "Login successful",
        "access_token": access_token,
        "user": {
            "id": user.id,
            "name": user.name,
            "email": user.email,
            "role": user.role
        }
    }), 200



# password change
@auth_bp.route('/change-password', methods=['PUT'])
@jwt_required()
def change_password():
    data = request.get_json() or {}
    current_password = data.get('current_password', "").strip()
    new_password = data.get('new_password', "").strip()

    if not current_password or not new_password:
        return jsonify({"error": "Both current and new passwords are required"}), 400

    user_id = get_jwt_identity()
    user = User.query.get(user_id)
    
    if not user or not check_password_hash(user.password, current_password):
        return jsonify({"error": "Current password is incorrect"}), 401

    if len(new_password) < 8:
        return jsonify({"error": "New password must be at least 8 characters long"}), 400

    user.password = generate_password_hash(new_password)
    db.session.commit()

    return jsonify({"message": "Password changed successfully"}), 200



#Logout
@auth_bp.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    return jsonify({"message": "Logout successful."}), 200


--------------------------------------------------------------------------------------------
cart.py
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from app import db
from app.models import Cart, Product

cart_bp = Blueprint('cart', __name__)










@cart_bp.route('/cart/add', methods=['POST'])
@jwt_required()
def add_to_cart():
    data = request.get_json()
    print("Received data:", data)
    if not data:
        return jsonify({'message': 'Invalid JSON payload'}), 422

    # Get the user_id from the JWT token
    user_id = get_jwt_identity()

    try:
        product_id = int(data.get('product_id'))
    except (TypeError, ValueError):
        return jsonify({'message': 'Product ID must be a valid integer'}), 422

    try:
        quantity = int(data.get('quantity', 1))
    except (TypeError, ValueError):
        return jsonify({'message': 'Quantity must be a valid integer'}), 422

    if not product_id:
        return jsonify({'message': 'Product ID is required'}), 400

    product = Product.query.get(product_id)
    if not product:
        return jsonify({'message': 'Product not found'}), 404

    if product.stock < quantity:
        return jsonify({'message': 'Insufficient stock available'}), 400

    # Check if the product already exists in the user's cart.
    cart_item = Cart.query.filter_by(user_id=user_id, product_id=product_id).first()
    if cart_item:
        cart_item.quantity += quantity
    else:
        new_cart_item = Cart(user_id=user_id, product_id=product_id, quantity=quantity)
        db.session.add(new_cart_item)

    db.session.commit()
    return jsonify({'message': 'Item added to cart'}), 201



@cart_bp.route('/update_cart_quantity', methods=['POST'])
@jwt_required()
def update_cart_quantity():
    user_id = get_jwt_identity()
    data = request.get_json()

    product_id = data.get('product_id')
    quantity = data.get('quantity')

    if not product_id or quantity is None:
        return jsonify({'message': 'Product ID and quantity are required'}), 400

    try:
        product_id = int(product_id)
        quantity = int(quantity)
    except ValueError:
        return jsonify({'message': 'Invalid product ID or quantity'}), 400

    cart_item = Cart.query.filter_by(user_id=user_id, product_id=product_id).first()
    if not cart_item:
        return jsonify({'message': 'Item not found in cart'}), 404

    if quantity < 1:
        db.session.delete(cart_item)
    else:
        cart_item.quantity = quantity

    db.session.commit()
    return jsonify({'message': 'Cart updated successfully'}), 200




@cart_bp.route('/cart/remove/<int:cart_id>', methods=['DELETE'])
@jwt_required()
def remove_from_cart(cart_id):
    user_id = get_jwt_identity()
    cart_item = Cart.query.filter_by(id=cart_id, user_id=user_id).first()

    if not cart_item:
        return jsonify({'message': 'Cart item not found'}), 404

    db.session.delete(cart_item)
    db.session.commit()
    return jsonify({'message': 'Item removed from cart'}), 200

@cart_bp.route('/cart/update', methods=['PUT'])
@jwt_required()
def update_cart():
    data = request.get_json()
    user_id = get_jwt_identity()
    cart_id = data.get('cart_id')
    quantity = data.get('quantity')

    if cart_id is None or quantity is None:
        return jsonify({'message': 'cart_id and quantity are required'}), 400

    cart_item = Cart.query.filter_by(id=cart_id, user_id=user_id).first()
    if not cart_item:
        return jsonify({'message': 'Cart item not found'}), 404

    if quantity <= 0:
        db.session.delete(cart_item)
        message = 'Item removed from cart'
    else:
        if cart_item.product.stock < quantity:
            return jsonify({'message': 'Insufficient stock for the desired quantity'}), 400
        cart_item.quantity = quantity
        message = 'Cart updated successfully'

    db.session.commit()
    return jsonify({'message': message}), 200




@cart_bp.route('/cart/view', methods=['GET', 'OPTIONS'])
def view_cart():
    if request.method == 'OPTIONS':
        return jsonify({'message': 'CORS preflight'}), 200  # ✅ Return early


    from flask_jwt_extended import jwt_required, get_jwt_identity

    @jwt_required()
    def get_cart():
        user_id = get_jwt_identity()
        cart_items = Cart.query.filter_by(user_id=user_id).all()

        cart_data = []
        for item in cart_items:
            cart_data.append({
                'cart_id': item.id,
                'product_id': item.product_id,
                'product_name': item.product.name,
                'quantity': item.quantity,
                'price': item.product.price,
                'total_price': item.quantity * item.product.price,
                'added_at': item.created_at.isoformat(),
                'image_url': item.product.image_url or ""

            })

        return jsonify(cart_data), 200

    return get_cart()




------------------------------------------------------------------------------------------------------------
models.py


from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, date

db = SQLAlchemy()



# User Model 
class User(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    phone = db.Column(db.String(15), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(20), nullable=False, default="user") # user, admin, runner
    is_active = db.Column(db.Boolean, nullable=False, default=True)  # true- is active, false is inactive
    
    addresses = db.relationship('Address', backref='user', lazy=True)
    orders = db.relationship('Order', backref='user', lazy=True)
    carts = db.relationship('Cart', backref='user', lazy=True)
    runner_assignments = db.relationship('RunnerAssignments', backref='runner', lazy=True, 
                                         foreign_keys='RunnerAssignments.runner_id')




class Address(db.Model):
    __tablename__ = 'address'
    
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    street = db.Column(db.String(255), nullable=False)
    city = db.Column(db.String(100), nullable=False)
    state = db.Column(db.String(100), nullable=False)
    zip_code = db.Column(db.String(20), nullable=False)
    country = db.Column(db.String(100), nullable=False)

# Product Model
class Product(db.Model):

    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text, nullable=True)
    price = db.Column(db.Float, nullable=False)
    unit = db.Column(db.String(50), nullable=False)
    stock = db.Column(db.Integer, nullable=False, default=0)
    category = db.Column(db.String(100), nullable=False)
    image_url = db.Column(db.String(255), nullable=True)
    
    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "category": self.category,
            "price": self.price,
            "unit": self.unit,
            "image_url": self.image_url or ""
        }


# Cart Model 
class Cart(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    product = db.relationship('Product', backref=db.backref('carts', lazy=True))

# Order Model
class Order(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    total_price = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(50), default="Pending")  # Pending, Processing, Out_for_delivery, Delivered, Cancelled
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships with related tables
    order_items = db.relationship('OrderItems', backref='order', lazy=True)
    payments = db.relationship('Payments', backref='order', lazy=True)
    runner_assignments = db.relationship('RunnerAssignments', backref='order', lazy=True)
    delivery_analytics = db.relationship('DeliveryAnalytics', backref='order', lazy=True, uselist=False)
    status_history = db.relationship('OrderStatusHistory', backref='order', lazy=True)

# Inventory Model 
class Inventory(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    stock = db.Column(db.Integer, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    product = db.relationship('Product', backref=db.backref('inventory', lazy=True))

# OrderItems Model (each record represents an item in an order)
class OrderItems(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    price_at_order_time = db.Column(db.Float, nullable=False)
    
    product = db.relationship('Product', backref=db.backref('order_items', lazy=True))

# RunnerAssignments Model 
class RunnerAssignments(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    runner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    assigned_at = db.Column(db.DateTime, default=datetime.utcnow)
    picked_up_at = db.Column(db.DateTime, nullable=True)
    delivered_at = db.Column(db.DateTime, nullable=True)
    status = db.Column(db.String(50), default="assigned")  # assigned, picked_up, delivered, cancelled

# Payments Model (tracks payment details for an order)
class Payments(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    payment_method = db.Column(db.String(30), nullable=False)
    transaction_id = db.Column(db.String(100), nullable=False)
    status = db.Column(db.String(20), nullable=False, default="pending")  # success, failed, pending
    paid_at = db.Column(db.DateTime, nullable=True)

# RunnerLocation Model (stores the current location of a runner/delivery agent)
class RunnerLocation(db.Model):
    
    runner_id = db.Column(db.Integer, db.ForeignKey('user.id'), primary_key=True)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    runner = db.relationship('User', backref=db.backref('runner_location', uselist=False))

























# ===============================
# Analytics Models
# ===============================

# DeliveryAnalytics Model (tracks delivery time metrics for each order)
class DeliveryAnalytics(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), unique=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    runner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    order_placed_at = db.Column(db.DateTime, nullable=False)
    order_picked_at = db.Column(db.DateTime, nullable=True)
    order_delivered_at = db.Column(db.DateTime, nullable=True)
 ###########################   # Track metrics such as product views, cart abandonment rates, and average cart size to optimize product offerings and user experience.
    @property
    def delivery_duration_minutes(self):
        if self.order_delivered_at and self.order_placed_at:
            return int((self.order_delivered_at - self.order_placed_at).total_seconds() / 60)
        return None

# OrderStatusHistory Model (logs every change in an order's status)
class OrderStatusHistory(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    old_status = db.Column(db.String(50), nullable=False)
    new_status = db.Column(db.String(50), nullable=False)
    changed_at = db.Column(db.DateTime, default=datetime.utcnow)

# ProductViews Model (tracks when a product is viewed by a user)
class ProductViews(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    viewed_at = db.Column(db.DateTime, default=datetime.utcnow)

# ProductSales Model (aggregates daily sales data for each product)
class ProductSales(db.Model):
    
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity_sold = db.Column(db.Integer, nullable=False)
    total_revenue = db.Column(db.Float, nullable=False)
    recorded_on = db.Column(db.Date, default=date.today)



-------------------------------------------------------------------------------------------------------------------------------------
order.py

from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from datetime import datetime
from app.models import db, Order, User

order_bp = Blueprint('order', __name__)



# Get Order Status

@order_bp.route('/order/status/<int:order_id>', methods=['GET'])
@jwt_required()
def get_order_status(order_id):
    user_id = get_jwt_identity()
    order = Order.query.filter_by(id=order_id, user_id=user_id).first()
    if not order:
        return jsonify({"error": "Order not found"}), 404

    # If updated_at is not available, remove this field from response
    last_updated = order.updated_at.strftime("%Y-%m-%d %H:%M:%S") if hasattr(order, 'updated_at') and order.updated_at else "N/A"
    
    return jsonify({
        "order_id": order.id,
        "status": order.status,
        "last_updated": last_updated
    }), 200


@order_bp.route('/order/status/update', methods=['POST'])
@jwt_required()
def update_order_status():
    data = request.get_json()
    order_id = data.get("order_id")
    new_status = data.get("status")

    if not order_id or not new_status:
        return jsonify({"error": "Order ID and new status are required"}), 400

    # Restrict to admin users only
    user_id = get_jwt_identity()
    user = User.query.get(user_id)
    if not user or user.role != "admin":
        return jsonify({"error": "Unauthorized"}), 403

    order = Order.query.filter_by(id=order_id).first()
    if not order:
        return jsonify({"error": "Order not found"}), 404

    order.status = new_status
    if hasattr(order, 'updated_at'):
        order.updated_at = datetime.utcnow()
    db.session.commit()

    return jsonify({"message": f"Order {order_id} status updated to {new_status}"}), 200



@order_bp.route('/order/webhook/payment', methods=['POST'])
def payment_webhook():
    data = request.get_json()
    order_id = data.get("order_id")
    payment_status = data.get("payment_status")

    if not order_id or not payment_status:
        return jsonify({"error": "Order ID and payment status are required"}), 400

    order = Order.query.filter_by(id=order_id).first()
    if not order:
        return jsonify({"error": "Order not found"}), 404

    if payment_status.lower() == "success":
        order.status = "Paid"
    else:
        order.status = "Payment Failed"

    if hasattr(order, 'updated_at'):
        order.updated_at = datetime.utcnow()
    db.session.commit()

    return jsonify({"message": f"Order {order_id} updated based on payment status: {payment_status}"}), 200


-------------------------------------------------------------------------------------------------------------------------------------
product.py

from flask import Blueprint, request, jsonify
from app.models import db, Product
from flask_jwt_extended import jwt_required, get_jwt_identity



import os
from flask import request, jsonify, send_from_directory
from werkzeug.utils import secure_filename
from app import app, db
from app.models import Product
from flask_jwt_extended import jwt_required
from flask import send_from_directory


product_bp = Blueprint('product', __name__)


UPLOAD_FOLDER = os.path.abspath(os.path.join(app.root_path,'img'))
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER







# Get all products
@product_bp.route('/get_all_products', methods=['GET'])
def get_products():
    products = Product.query.all()
    return jsonify([product.to_dict() for product in products]), 200



# @product_bp.route('/get_all_products', methods=['GET'])
# def get_products():
#     products = Product.query.all()
#     return jsonify([product.to_dict() for product in products]), 200

# Get a single product by ID
@product_bp.route('/get_product/<int:id>', methods=['GET'])
def get_product(id):
    product = Product.query.get(id)
    if not product:
        return jsonify({"error": "Product not found"}), 404
    return jsonify(product.to_dict()), 200

# Get products based on category
@product_bp.route('/category/filter', methods=['GET'])
def filter_products_by_category():
    category = request.args.get('category')
    if not category:
        return jsonify({"message": "Please provide a category to filter"}), 400
    products = Product.query.filter_by(category=category).all()
    return jsonify([product.to_dict() for product in products]), 200






from flask import request, jsonify
from flask_jwt_extended import jwt_required
from werkzeug.utils import secure_filename
import os
from .models import Product 
from . import db, app  

FIXED_CATEGORIES = ["Fruits", "Vegetables", "Dairy"]


@product_bp.route('/add_product', methods=['POST'])
@jwt_required()
def add_product():
    # Get form data
    name = request.form.get('name')
    description = request.form.get('description', "")
    price = request.form.get('price')
    unit = request.form.get('unit')
    stock = request.form.get('stock')
    category = request.form.get('category')
    

    # Validate required fields
    if not all([name, description, price, unit, stock, category]):
        return jsonify({"error": "Missing required fields"}), 400
    
    if category not in FIXED_CATEGORIES:
        return jsonify({"error": f"Invalid category. Choose from {FIXED_CATEGORIES}"}), 400


    # Handle image file
    image_file = request.files.get('image')
    image_url = ""

    if image_file and image_file.filename != "":
        filename = secure_filename(image_file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        image_file.save(filepath)
        image_url = f"img/{filename}"  

    # Create product instance
    new_product = Product(
        name=name,
        description=description,
        price=float(price),
        unit=unit,
        stock=int(stock),
        category=category,
        image_url=image_url  # Set image URL path
    )

    # Commit to DB
    db.session.add(new_product)
    db.session.commit()

    return jsonify({
        "message": "Product added successfully",
        "product": new_product.to_dict()  # Ensure your Product model has a to_dict method
    }), 201



# Update a product (Admin Only)
@product_bp.route('/update_product/<int:id>', methods=['PUT'])
@jwt_required()
def update_product(id):
    product = Product.query.get(id)
    if not product:
        return jsonify({"error": "Product not found"}), 404

    data = request.get_json()
    
    product.name = data.get('name', product.name)
    product.description = data.get('description', product.description)
    product.price = data.get('price', product.price)
    product.unit = data.get('unit', product.unit)
    product.stock = data.get('stock', product.stock)
    product.category = data.get('category', product.category)
    product.image_url = data.get('image_url', product.image_url)


    db.session.commit()
    return jsonify({"message": "Product updated successfully"}), 200

# Delete a product (Admin Only)
@product_bp.route('/delete_product/<int:id>', methods=['DELETE'])
@jwt_required()
def delete_product(id):
    product = Product.query.get(id)
    if not product:
        return jsonify({"error": "Product not found"}), 404

    db.session.delete(product)
    db.session.commit()
    return jsonify({"message": "Product deleted successfully"}), 200

# Get product details for a card
@product_bp.route('/card/<int:product_id>', methods=['GET'])
def get_product_card(product_id):
    product = Product.query.get(product_id)
    
    if not product:
        return jsonify({'message': 'Product not found'}), 404
    
    product_card = {
        'product_id': product.id,
        'name': product.name,
        'image_url': product.image_url or "",  # Default empty string to prevent issues
        'price': product.price,
        'unit': product.unit,
        # 'discount': product.discount if product.discount is not None else 0  # Default to 0 if None
    }
    
    return jsonify(product_card), 200






@product_bp.route('/upload_image/<int:product_id>', methods=['POST'])
@jwt_required()
def upload_product_image(product_id):
    product = Product.query.get(product_id)

    if not product:
        return jsonify({"error": "Product not found"}), 404

    if 'image' not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files['image']

    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

    file.save(filepath)

    product.image_url = f"img/{filename}"
    db.session.commit()

    return jsonify({
        "message": "Image uploaded successfully",
        "image_url": product.image_url
    }), 200




@app.route('/img/<filename>')
def serve_image(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)







# FAILED ↓
           

# @product_bp.route('/upload_images_bulk', methods=['POST'])
# @jwt_required()
# def upload_images_bulk():
#     updated_images = {}
    
#     for key in request.files:
#         if not key.startswith("product_"):
#             continue  

#         try:
#             product_id = int(key.split("_")[1])
#         except Exception as e:
#             continue  

#         file = request.files[key]
#         if file.filename == '':
#             continue  

#         filename = secure_filename(file.filename)
#         filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
#         file.save(filepath)
        
#         image_url = f"img/{filename}"
        
#         product = Product.query.get(product_id)
#         if product:
#             product.image_url = image_url
#             updated_images[product_id] = image_url

#     db.session.commit()

#     return jsonify({
#         "message": "Bulk image upload successful",
#         "updated_images": updated_images
#     }), 200

-----------------------------------------------