from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from app import db
from app.models import Cart, Product

cart_bp = Blueprint('cart', __name__)

@cart_bp.route('/cart/add', methods=['POST'])
@jwt_required()
def add_to_cart():
    data = request.get_json()
    # Get the user_id from JWT token
    user_id = get_jwt_identity()
    product_id = data.get('product_id')
    quantity = data.get('quantity', 1)

    if not product_id:
        return jsonify({'message': 'Product ID is required'}), 400
    product = Product.query.get(product_id)
    if not product:
        return jsonify({'message': 'Product not found'}), 404

    if product.stock < quantity:
        return jsonify({'message': 'Insufficient stock available'}), 400
    # Check if the product already exists in the user's cart.
    cart_item = Cart.query.filter_by(user_id=user_id, product_id=product_id).first()
    if cart_item:
        cart_item.quantity += quantity
    else:
        new_cart_item = Cart(user_id=user_id, product_id=product_id, quantity=quantity)
        db.session.add(new_cart_item)

    db.session.commit()
    return jsonify({'message': 'Item added to cart'}), 201

@cart_bp.route('/cart/remove/<int:cart_id>', methods=['DELETE'])
@jwt_required()
def remove_from_cart(cart_id):
    user_id = get_jwt_identity()
    cart_item = Cart.query.filter_by(id=cart_id, user_id=user_id).first()

    if not cart_item:
        return jsonify({'message': 'Cart item not found'}), 404

    db.session.delete(cart_item)
    db.session.commit()
    return jsonify({'message': 'Item removed from cart'}), 200

@cart_bp.route('/cart/update', methods=['PUT'])
@jwt_required()
def update_cart():
    data = request.get_json()
    user_id = get_jwt_identity()
    cart_id = data.get('cart_id')
    quantity = data.get('quantity')

    if cart_id is None or quantity is None:
        return jsonify({'message': 'cart_id and quantity are required'}), 400

    cart_item = Cart.query.filter_by(id=cart_id, user_id=user_id).first()
    if not cart_item:
        return jsonify({'message': 'Cart item not found'}), 404

    if quantity <= 0:
        db.session.delete(cart_item)
        message = 'Item removed from cart'
    else:
        if cart_item.product.stock < quantity:
            return jsonify({'message': 'Insufficient stock for the desired quantity'}), 400
        cart_item.quantity = quantity
        message = 'Cart updated successfully'

    db.session.commit()
    return jsonify({'message': message}), 200

@cart_bp.route('/cart/view', methods=['GET'])
@jwt_required()
def view_cart():
    user_id = get_jwt_identity()
    cart_items = Cart.query.filter_by(user_id=user_id).all()

    cart_data = []
    for item in cart_items:
        cart_data.append({
            'cart_id': item.id,
            'product_id': item.product_id,
            'product_name': item.product.name,
            'quantity': item.quantity,
            'price': item.product.price,
            'total_price': item.quantity * item.product.price,
            'added_at': item.created_at.isoformat()
        })

    return jsonify(cart_data), 200


---------------------
import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { addToCart } from './services/cartservices';

function Products() {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState("All");

  const CATEGORIES = ["All", "Fruits", "Vegetables", "Dairy"];

  useEffect(() => {
    fetch('http://localhost:5000/get_all_products')
      .then((response) => {
        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }
        return response.json();
      })
      .then((data) => {
        setProducts(data);
        setFilteredProducts(data);
        setLoading(false);
      })
      .catch((error) => {
        setError(error.message);
        setLoading(false);
      });
  }, []);

  const handleCategoryChange = (event) => {
    const category = event.target.value;
    setSelectedCategory(category);

    if (category === "All") {
      setFilteredProducts(products);
    } else {
      setFilteredProducts(products.filter(product => product.category === category));
    }
  };

  const handleAddToCart = async (productId) => {
    try {
      const res = await addToCart(productId);
      alert(res.message);
    } catch (err) {
      alert(err.message || 'Failed to add to cart');
    }
  };

  if (loading) return <p>Loading...</p>;
  if (error) return <p className="text-red-500">{error}</p>;

  return (
    <div>
      {/* Header Section with Category Dropdown */}
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">All Products</h2>

        <div className="flex justify-end">
          <label className="mr-2 font-semibold">Filter by Category:</label>
          <select
            className="border rounded-md p-2"
            value={selectedCategory}
            onChange={handleCategoryChange}
          >
            {CATEGORIES.map((cat) => (
              <option key={cat} value={cat}>
                {cat}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Product Grid */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {filteredProducts.map((product) => (
          <div key={product.id} className="bg-white rounded-lg shadow-md overflow-hidden">
            <img
              src={`http://localhost:5000/${product.image_url}`}
              alt={product.name}
              className="w-full h-80 object-cover"
            />

            <div className="p-4">
              <h3 className="text-lg font-semibold">{product.name}</h3>
              <p className="text-gray-600">₹{product.price.toFixed(2)}</p>
              <button
                className="mt-4 w-full bg-primary text-white py-2 rounded-md hover:bg-primary/90"
                onClick={() => handleAddToCart(product.id)}
              >
                Add to Cart
              </button>
              <Link
                to={`/products/${product.id}`}
                className="mt-2 block text-center text-primary hover:underline"
              >
                View Details
              </Link>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Products;






--------------
import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { addToCart } from './services/cartservices';

function ProductDetail() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState('');

  useEffect(() => {
    fetch(`http://localhost:5000/get_product/${id}`)
      .then(res => {
        if (!res.ok) throw new Error('Failed to fetch product');
        return res.json();
      })
      .then(data => setProduct(data))
      .catch(err => setError(err.message));
  }, [id]);

  const handleAddToCart = async () => {
    try {
      const res = await addToCart(product.id, 1);
      setMessage(res.message);
    } catch (err) {
      setMessage(err.message || 'Failed to add to cart');
    }
  };

  if (error) return <p className="text-red-500">{error}</p>;
  if (!product) return <p>Loading...</p>;

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <img
            src={`http://localhost:5000/${product.image_url}`}
            alt={product.name}
            className="w-full h-96 object-cover rounded-lg"
          />
          
          <div className="space-y-4">
            <h1 className="text-3xl font-bold">{product.name}</h1>
            <p className="text-2xl text-primary">₹{product.price.toFixed(2)}</p>
            <p className="text-gray-600">{product.description}</p>

            <button
              className="w-full bg-primary text-white py-3 rounded-lg hover:bg-primary/90"
              onClick={handleAddToCart}
            >
              Add to Cart
            </button>
            {message && <p className="text-sm text-green-600">{message}</p>}
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProductDetail;



















---------------------
import { useEffect, useState } from 'react';

function Cart() {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchCartItems = async () => {
    try {
      const res = await fetch('http://localhost:5000/get_cart', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (!res.ok) throw new Error('Failed to fetch cart items');

      const data = await res.json();
      setCartItems(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCartItems();
  }, []);

  const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleQuantityChange = async (id, action) => {
    const newQuantity =
      action === 'increase'
        ? cartItems.find((item) => item.id === id).quantity + 1
        : cartItems.find((item) => item.id === id).quantity - 1;

    if (newQuantity < 1) return;

    try {
      const res = await fetch(`http://localhost:5000/update_cart_quantity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
        body: JSON.stringify({ product_id: id, quantity: newQuantity }),
      });

      if (!res.ok) throw new Error('Failed to update quantity');

      fetchCartItems();
    } catch (err) {
      alert(err.message);
    }
  };

  const handleRemove = async (id) => {
    try {
      const res = await fetch(`http://localhost:5000/remove_from_cart/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
        },
      });

      if (!res.ok) throw new Error('Failed to remove item');

      fetchCartItems();
    } catch (err) {
      alert(err.message);
    }
  };

  if (loading) return <p>Loading...</p>;
  if (error) return <p className="text-red-500">{error}</p>;

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">Shopping Cart</h2>

      {cartItems.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-600">Your cart is empty</p>
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="space-y-4">
            {cartItems.map((item) => (
              <div key={item.id} className="flex items-center space-x-4 py-4 border-b">
                <img
                  src={`http://localhost:5000/${item.image_url}`}
                  alt={item.name}
                  className="w-24 h-24 object-cover rounded"
                />
                <div className="flex-1">
                  <h3 className="text-lg font-semibold">{item.name}</h3>
                  <p className="text-gray-600">₹{item.price.toFixed(2)}</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    className="px-2 py-1 border rounded"
                    onClick={() => handleQuantityChange(item.id, 'decrease')}
                  >
                    -
                  </button>
                  <span>{item.quantity}</span>
                  <button
                    className="px-2 py-1 border rounded"
                    onClick={() => handleQuantityChange(item.id, 'increase')}
                  >
                    +
                  </button>
                </div>
                <button
                  className="text-red-500 hover:text-red-700"
                  onClick={() => handleRemove(item.id)}
                >
                  Remove
                </button>
              </div>
            ))}
          </div>

          <div className="mt-6 border-t pt-6">
            <div className="flex justify-between text-xl font-semibold">
              <span>Total:</span>
              <span>₹{total.toFixed(2)}</span>
            </div>
            <button
              className="mt-4 w-full bg-primary text-white py-3 rounded-lg hover:bg-primary/90"
              onClick={() => alert('Proceeding to checkout!')}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default Cart;

















-----------------------


Failed to load resource: the server responded with a status of 422 (UNPROCESSABLE ENTITY)
127.0.0.1:5000/cart/add:1


------------------
127.0.0.1 - - [08/Apr/2025 19:49:55] "GET /get_all_products HTTP/1.1" 200 -
127.0.0.1 - - [08/Apr/2025 19:50:54] "OPTIONS /cart/add HTTP/1.1" 200 -
127.0.0.1 - - [08/Apr/2025 19:50:54] "POST /cart/add HTTP/1.1" 422 -


-----------------------
please help
